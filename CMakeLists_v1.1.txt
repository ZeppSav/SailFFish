cmake_minimum_required(VERSION 3.16)
project(SailFFish VERSION 1.1 LANGUAGES CXX)

# C++ standard
set(CMAKE_CXX_STANDARD 20)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

# Optimization and architecture flags
add_compile_options(-O3 -march=native -fopenmp)

# Add executable
add_executable(${PROJECT_NAME}
    main.cpp
    src/DataTypes/DataType_Base.cpp
    src/DataTypes/DataType_CUDA.cpp
    src/DataTypes/DataType_FFTW.cpp
    src/DataTypes/DataType_MKL.cpp
    src/Solvers/Dirichlet_Solver.cpp
    src/Solvers/Export_Grid.cpp
    src/Solvers/Neumann_Solver.cpp
    src/Solvers/Periodic_Solver.cpp
    src/Solvers/Solver_Base.cpp
    src/Solvers/Unbounded_Solver.cpp
)

# Include directories
target_include_directories(${PROJECT_NAME} PRIVATE
    ${CMAKE_CURRENT_SOURCE_DIR}/../Eigen
    ${CMAKE_CURRENT_SOURCE_DIR}/src
)

# Compile-time definitions
target_compile_definitions(${PROJECT_NAME} PRIVATE
    SinglePrec
    # DoublePrec
    FFTW
    # CUFFT
)

# Link OpenMP
find_package(OpenMP REQUIRED)
if(OpenMP_CXX_FOUND)
    target_link_libraries(${PROJECT_NAME} PRIVATE OpenMP::OpenMP_CXX)
endif()

# Platform-specific FFTW linking
if(WIN32)
    set(FFTW_DIR "${CMAKE_CURRENT_SOURCE_DIR}/../FFTW/fftw-3.3.5-dll64")
    target_include_directories(${PROJECT_NAME} PRIVATE ${FFTW_DIR})
    target_link_directories(${PROJECT_NAME} PRIVATE ${FFTW_DIR})
    target_link_libraries(${PROJECT_NAME} PRIVATE libfftw3-3 libfftw3f-3)
else()
    target_link_libraries(${PROJECT_NAME} PRIVATE fftw3f fftw3f_threads fftw3 fftw3_threads)
endif()

# Optional CUFFT support 
# find_package(CUDA REQUIRED)
# target_include_directories(${PROJECT_NAME} PRIVATE "C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v11.8/include")
# target_link_directories(${PROJECT_NAME} PRIVATE "C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v11.8/bin")
# target_link_libraries(${PROJECT_NAME} PRIVATE cudart64_110 cufft64_10 cufftw64_10 cublas64_11)